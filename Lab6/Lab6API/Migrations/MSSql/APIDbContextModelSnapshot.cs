// <auto-generated />
using System;
using Lab6API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lab6API.Migrations.MSSql
{
    [DbContext(typeof(APIDbContext))]
    partial class APIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Lab6API.Models.Appointments", b =>
                {
                    b.Property<Guid>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("AppointmentEndDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("AppointmentStartDatetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("AppointmentStatusCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AppointmentId");

                    b.HasIndex("AppointmentStatusCode");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Lab6API.Models.AppointmentStatusCodes", b =>
                {
                    b.Property<Guid>("AppointmentStatusCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AppointmentStatusDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppointmentStatusCode");

                    b.ToTable("AppointmentStatusCodes");
                });

            modelBuilder.Entity("Lab6API.Models.PatientRecords", b =>
                {
                    b.Property<Guid>("PatientRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ComponentCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PatientRecordComponentDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("PatientRecordId");

                    b.HasIndex("ComponentCode");

                    b.HasIndex("PatientId");

                    b.HasIndex("UpdatedByStaffId");

                    b.ToTable("PatientRecords");
                });

            modelBuilder.Entity("Lab6API.Models.Patients", b =>
                {
                    b.Property<Guid>("PattientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommanagedYn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("NhsNumber")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PatientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("PattientId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Lab6API.Models.RecordComponents", b =>
                {
                    b.Property<Guid>("ComponentCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ComponentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComponentCode");

                    b.ToTable("RecordComponents");
                });

            modelBuilder.Entity("Lab6API.Models.Roles", b =>
                {
                    b.Property<Guid>("RoleCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleCode");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Lab6API.Models.Staff", b =>
                {
                    b.Property<Guid>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StaffBirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("StaffCategoryCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffMiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffQualifications")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.HasIndex("RoleCode");

                    b.HasIndex("StaffCategoryCode");

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Lab6API.Models.StaffCategories", b =>
                {
                    b.Property<Guid>("StaffCategoryCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StaffCategoryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffCategoryCode");

                    b.ToTable("StaffCategories");
                });

            modelBuilder.Entity("Lab6API.Models.StaffPatientAssociations", b =>
                {
                    b.Property<Guid>("AssociationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssociationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("AssociationEndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("AssociationStartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AssociationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("StaffPatientAssociations");
                });

            modelBuilder.Entity("Lab6API.Models.Appointments", b =>
                {
                    b.HasOne("Lab6API.Models.AppointmentStatusCodes", "AppointmentStatusCodes")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStatusCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6API.Models.Patients", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6API.Models.Staff", "Staff")
                        .WithMany("Appointments")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentStatusCodes");

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lab6API.Models.PatientRecords", b =>
                {
                    b.HasOne("Lab6API.Models.RecordComponents", "RecordComponent")
                        .WithMany("PatientRecords")
                        .HasForeignKey("ComponentCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6API.Models.Patients", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6API.Models.Staff", "Staff")
                        .WithMany("PatientRecords")
                        .HasForeignKey("UpdatedByStaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RecordComponent");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lab6API.Models.Staff", b =>
                {
                    b.HasOne("Lab6API.Models.Roles", "Role")
                        .WithMany("Staffs")
                        .HasForeignKey("RoleCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6API.Models.StaffCategories", "StaffCategory")
                        .WithMany("Staffs")
                        .HasForeignKey("StaffCategoryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("StaffCategory");
                });

            modelBuilder.Entity("Lab6API.Models.StaffPatientAssociations", b =>
                {
                    b.HasOne("Lab6API.Models.Patients", "Patient")
                        .WithMany("Associations")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lab6API.Models.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Lab6API.Models.AppointmentStatusCodes", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Lab6API.Models.Patients", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Associations");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("Lab6API.Models.RecordComponents", b =>
                {
                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("Lab6API.Models.Roles", b =>
                {
                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("Lab6API.Models.Staff", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("Lab6API.Models.StaffCategories", b =>
                {
                    b.Navigation("Staffs");
                });
#pragma warning restore 612, 618
        }
    }
}
